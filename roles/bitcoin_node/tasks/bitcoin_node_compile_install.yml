---
- name: Ensure linux_service_user is present
  user:
    name: "{{ linux_service_user }}"
    shell: /bin/bash
    create_home: true

- name: Ensure all necessary files and directories exist before proceeding, and wipe existing repos before re-compiling
  file:
    path: "{{ item.path }}"
    state: "{{ item.state }}"
    owner: "{{ linux_service_user }}"
    group: "{{ linux_service_user }}"
    force: True
  loop:
    - { "path": "{{ bitcoin_node_vars['data_root'] }}", "state": "directory" }
    - { "path": "{{ bitcoin_node_vars['data_root'] }}/.bitcoin", "state": "directory" }
    - { "path": "{{ bitcoin_node_vars['data_root'] }}/.bitcoin/logs", "state": "directory" }
    - { "path": "{{ bitcoin_node_vars['data_root'] }}/.bitcoin/logs/debug.log", "state": "touch" }
    - { "path": "{{ bitcoin_node_vars['config_dir'] }}", "state": "directory" }
    - { "path": "{{ bitcoin_node_vars['config_dir'] }}/bitcoin.conf", "state": "touch" }

- name: block device reformat
  when:
    - bitcoin_node_vars["reformat_device"] | default(false) | bool
    - bitcoin_node_vars["device_path"] | regex_search("^\/dev\/")
  include_tasks:
    file: reformat_block_device.yml

- name: Full bitcoin core recompile block
  when: bitcoin_node_vars['full_compile'] | default('True') | bool
  block:

    - name: Wipe existing bitcoin repos, ensuring a fresh compile with latest code
      file:
        path: "{{ item.path }}"
        state: "{{ item.state }}"
        owner: "{{ linux_service_user }}"
        group: "{{ linux_service_user }}"
        force: True
      loop:
        - { "path": "{{ bitcoin_node_vars['code_dir'] }}", "state": "absent" }
        - { "path": "{{ bitcoin_node_vars['code_dir'] }}", "state": "directory" }

    - name: git clone bitcoin source code
      git:
        repo: 'https://github.com/bitcoin/bitcoin.git'
        dest: "{{ bitcoin_node_vars['code_dir'] }}/bitcoin"
        clone: True

    - name: Execute autogen.sh and configure from bitcoin git repo, then make + make install (this takes a very long time!)
      shell:
        cmd: "git checkout tags/{{ bitcoin_node_vars['bitcoin_git_tag'] }} && \
              ./autogen.sh && \ 
              export BDB_PREFIX=\"{{ bitcoin_node_vars['code_dir'] }}/bitcoin/db4\" && \
              /bin/bash ./configure.ac BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" BDB_CFLAGS=\"-I${BDB_PREFIX}/include\" && \
              make && \
              sudo make install"
      args:
        chdir: "{{ bitcoin_node_vars['code_dir'] }}/bitcoin"

- name: template bitcoin.conf configuration file
  template:
    src: bitcoin.conf.j2
    dest: "{{ bitcoin_node_vars['config_dir'] }}/bitcoin.conf"
    user: "{{ linux_service_user }}"

- name: SystemD service configuration
  when: update_systemd | default(False) | bool
  block:

    - name: template bitcoind systemd unit file
      template:
        src: bitcoind.service.j2
        dest: /etc/systemd/system/bitcoind.service

    - name: start bitcoind.service
      register: bitcoind_systemctl_start
      systemd:
        state: started
        enabled: True
        name: bitcoind.service
        daemon_reload: True

    - name: mask systemd units that could interrupt node operation
      systemd:
        state: masked
        name: "{{ item }}"
      loop:
        - "sleep.target"
        - "suspend.target"
        - "hibernate.target"
        - "hybrid-sleep.target"

    - name: restart logind
      systemd:
        state: restarted
        name: "systemd-logind.service"

- name: Finished, display status
  debug:
    var: bitcoind_systemctl_start